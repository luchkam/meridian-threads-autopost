// –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ 1 —Ç–µ–∫—Å—Ç–∞ –≤ Threads —á–µ—Ä–µ–∑ Assistants v2 + –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä—ã (Gist)
import axios from "axios";

// ===== ENV =====
const {
  OPENAI_API_KEY,
  ASSISTANT_ID,
  THREADS_USER_ACCESS_TOKEN,
  GITHUB_TOKEN,
  GIST_ID,
  STATE_FILE = "state.json",
  DRY_RUN = "0"
} = process.env;

function need(name){ if(!process.env[name]) throw new Error(`ENV ${name} is required`); }
["OPENAI_API_KEY","ASSISTANT_ID","THREADS_USER_ACCESS_TOKEN","GITHUB_TOKEN","GIST_ID"].forEach(need);

// ===== Gist state =====
async function loadState(){
  const { data } = await axios.get(`https://api.github.com/gists/${GIST_ID}`, {
    headers: { Authorization: `Bearer ${GITHUB_TOKEN}`, "User-Agent": "meridian-threads-autopost" }
  });
  const file = data.files?.[STATE_FILE];
  if (!file?.content) return { last_id: 0, published_titles: [] };
  try { return JSON.parse(file.content); } catch { return { last_id: 0, published_titles: [] }; }
}
async function saveState(state){
  const files = {}; files[STATE_FILE] = { content: JSON.stringify(state, null, 2) };
  await axios.patch(`https://api.github.com/gists/${GIST_ID}`, { files }, {
    headers: { Authorization: `Bearer ${GITHUB_TOKEN}`, "User-Agent": "meridian-threads-autopost" }
  });
}

// ===== OpenAI Assistants v2 =====
const OA = axios.create({
  baseURL: "https://api.openai.com/v1",
  headers: {
    Authorization: `Bearer ${OPENAI_API_KEY}`,
    "OpenAI-Beta": "assistants=v2",
    "Content-Type": "application/json"
  },
  timeout: 60000
});

async function runAssistant(nextId, publishedTitles){
  // 1) —Å–æ–∑–¥–∞—Ç—å thread
  const thread = await OA.post("/threads", {});
  const thread_id = thread.data.id;

  // 2) user message: –ø—Ä–æ—Å–∏–º 1 –ø–æ—Å—Ç –≤ —Å—Ç—Ä–æ–≥–æ–º JSON (RU, –±–µ–∑ —Ü–µ–Ω, –±–µ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)
  const msg = [
    `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ò–ù –ø–æ—Å—Ç –¥–ª—è Threads —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –ú–µ—Ä–∏–¥–∏–∞–Ω —Å—Ç—Ä–æ–≥–æ –≤ JSON.`,
    `–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (type="single"), –±–µ–∑ —Å—Å—ã–ª–æ–∫, –±–µ–∑ —Ü–µ–Ω –∏ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –†–ö.`,
    `–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {"lang":"ru","type":"single","title":"<=60","body":"<=500 –∏ –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ","tag":"–æ–¥–∏–Ω tag –±–µ–∑ #","cta":"–ù–∞–ø–∏—à–∏—Ç–µ –≤ –î–ú —Å–ª–æ–≤–æ ‚Äú–ë–†–û–ù–¨‚Äù‚Ä¶"}.`,
    `–ê–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä—ã: –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑: ${ (publishedTitles||[]).slice(-100).join(" | ") || "‚Äî" }.`,
    `next_id=${nextId}.`
  ].join(" ");

  await OA.post(`/threads/${thread_id}/messages`, { role: "user", content: msg });

  // 3) –∑–∞–ø—É—Å—Ç–∏—Ç—å run
  const run = await OA.post(`/threads/${thread_id}/runs`, { assistant_id: ASSISTANT_ID });
  const run_id = run.data.id;

  // 4) –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  let status = run.data.status;
  while (!["completed","failed","cancelled","expired"].includes(status)) {
    await new Promise(r => setTimeout(r, 1500));
    const r2 = await OA.get(`/threads/${thread_id}/runs/${run_id}`);
    status = r2.data.status;
  }
  if (status !== "completed") throw new Error(`Run status=${status}`);

  // 5) –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
  const messages = await OA.get(`/threads/${thread_id}/messages`, { params: { order: "desc", limit: 5 } });
  const firstAssistant = messages.data.data.find(m => m.role === "assistant");
  const parts = (firstAssistant?.content || []).map(c => c?.text?.value || "").filter(Boolean);
  const raw = parts.join("\n").trim();

  // 6) –≤—ã–¥—Ä–∞—Ç—å JSON (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
  const start = raw.indexOf("{");
  const end = raw.lastIndexOf("}");
  if (start < 0 || end < 0) throw new Error("Assistant output has no JSON");
  const json = JSON.parse(raw.slice(start, end+1));

  if (json.lang !== "ru" || json.type !== "single") throw new Error("JSON not in required format (ru/single)");
  if (!json.title || !json.body || !json.cta) throw new Error("Missing fields in JSON");

  // –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Threads
  const text = `${json.title}\n${json.body}\n\n${json.cta}`;
  const tag = (json.tag || "").trim();

  return { text, title: json.title.trim(), tag };
}

// ===== Threads publish (TEXT, auto publish) =====
async function postToThreads({ text, tag }){
  const url = "https://graph.threads.net/me/threads";
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤ –æ—Ñ–∏—Ü. Postman –∫–æ–ª–ª–µ–∫—Ü–∏–∏: media_type=TEXT, auto_publish_text=true, reply_control, topic_tag
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî Bearer USER ACCESS TOKEN
  const resp = await axios.post(url, null, {
    headers: {
      "Authorization": `Bearer ${THREADS_USER_ACCESS_TOKEN}`,
      "Accept": "application/json"
    },
    params: {
      media_type: "TEXT",
      text,
      auto_publish_text: true,
      reply_control: "everyone",
      ...(tag ? { topic_tag: tag } : {})
    },
    timeout: 20000
  });
  return resp.data; // { id: "..." }
}

// ===== Main =====
(async () => {
  console.log("‚ñ∂Ô∏è Start Meridian Threads autopost‚Ä¶");
  const state = await loadState(); // { last_id, published_titles }
  const nextId = (state.last_id ?? 0) + 1;

  const { text, title, tag } = await runAssistant(nextId, state.published_titles || []);

  if (state.published_titles?.includes(title)) {
    throw new Error(`Title already published earlier: "${title}"`);
  }

  if (DRY_RUN === "1") {
    console.log("----- DRY RUN -----\n" + text + "\nTag:", tag, "\n-------------------");
  } else {
    const res = await postToThreads({ text, tag });
    console.log("‚úÖ Published to Threads:", res);
  }

  const published = Array.isArray(state.published_titles) ? state.published_titles : [];
  if (title && !published.includes(title)) published.push(title);

  await saveState({ last_id: nextId, published_titles: published.slice(-500) });
  console.log("üíæ State saved. Done.");
})().catch(err => {
  console.error("‚ùå Fatal:", err?.response?.data || err.message || err);
  process.exit(1);
});
